# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:14.17.4-browsers

set_env: &set_env
  name: Setup Environment Variables
  command: |
    if [[ $CIRCLE_PULL_REQUEST ]]
    then
      echo 'Fetching Base Commit from GitHub'
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
      echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
    else
      echo 'Fetching Base Commit from Deploy Cache'
      if [[ ! -f dist/last-deploy.txt ]]
      then
        mkdir dist && git rev-parse HEAD~1 > dist/last-deploy.txt
      fi
      echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
    fi
    source $BASH_ENV
    echo $AFFECTED_ARGS
npm_cache: &npm_cache
  keys:
    - v1-dependencies-{{ checksum "package.json" }}
    # fallback to using the latest cache if no exact match is found
    - v1-dependencies-

deploy_cache: &deploy_cache
  key: last-deploy-sha

npm_install: &npm_install
  name: Install Dependencies
  command: npm install

jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *npm_cache
      - run:
          <<: *npm_install
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - ~/.cache
            - node_modules
  check-formatting:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - run: npm run format:check ${AFFECTED_ARGS}
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - run: ./node_modules/.bin/nx workspace-lint
      - run: npm run affected:lint ${AFFECTED_ARGS} --parallel
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - run:
          name: Set commit hash as a build version
          command: echo 'export NX_COMMIT_HASH="${CIRCLE_SHA1::7}"' >> $BASH_ENV
      - run: npm run affected:build -- ${AFFECTED_ARGS} --parallel --configuration production --sourceMap false
      - save_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - dist
      - store_artifacts:
          path: dist
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - run: npm run affected:test -- ${AFFECTED_ARGS} --parallel -- --ci --code-coverage
  e2e:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - run: npm run affected:e2e -- ${AFFECTED_ARGS} --configuration production -- --headless
      - store_artifacts:
          path: dist/cypress

  deploy:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *npm_cache
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: npm run affected -- --target deploy ${AFFECTED_ARGS} --user $FTP_USER --host $FTP_HOST --pass $FTP_PASS
      - run: curl --fail $ENV_MANAGER_HOST/env/$ENV_MANAGER_ENV?auth=$ENV_MANAGER_PASS
      - run: git rev-parse HEAD > dist/last-$ENV_MANAGER_ENV-deploy.txt
      - save_cache:
          key: last-deploy-sha
          paths:
            - dist/last-$ENV_MANAGER_ENV-deploy.txt

workflows:
  version: 2
  build-n-deploy:
    jobs:
      - install
      - lint:
          requires:
            - install
      - build:
          requires:
            - install
#      - deploy:
#          context: pasnik-stage
#          filters:
#            branches:
#              only:
#                - master
#          requires:
#            - lint
#            - build
      - deploy:
          type: approval
          context: pasnik-prod
#          filters:
#            branches:
#              only:
#                - master
          requires:
            - lint
            - build
